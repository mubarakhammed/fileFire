name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --workspace --verbose

  build:
    name: Build All Targets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build core
        run: cargo build --release --package filefire-core --target ${{ matrix.target }}

      - name: Build plugins
        run: |
          cargo build --release --package filefire-ocr-plugin --target ${{ matrix.target }}
          cargo build --release --package filefire-watermark-plugin --target ${{ matrix.target }}
          cargo build --release --package filefire-ai-plugin --target ${{ matrix.target }}
          cargo build --release --package filefire-signature-plugin --target ${{ matrix.target }}

      - name: Build cloud API
        run: cargo build --release --package filefire-cloud-api --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: filefire-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/libfilefire_core.*
            target/${{ matrix.target }}/release/filefire-api*
            target/${{ matrix.target }}/release/lib*plugin.*

  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: wasm32-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build WASM
        run: |
          cd core
          wasm-pack build --target web --out-dir ../bindings/wasm/pkg

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: filefire-wasm
          path: bindings/wasm/pkg/

  build-flutter:
    name: Build Flutter Binding
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.16.0"

      - name: Get Flutter dependencies
        run: |
          cd bindings/flutter
          flutter pub get

      - name: Analyze Flutter code
        run: |
          cd bindings/flutter
          flutter analyze

      - name: Run Flutter tests
        run: |
          cd bindings/flutter
          flutter test

      - name: Build Flutter example
        run: |
          cd examples/flutter_app
          flutter pub get
          flutter build web --release

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: cloud/docker/Dockerfile
          push: true
          tags: |
            filefire/api:latest
            filefire/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
